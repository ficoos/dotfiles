[semantic_scopes]
# Map textmate scopes to kakoune faces for semantic highlighting
# the underscores are translated to dots, and indicate nesting.
# That is, if variable_other_field is omitted, it will try the face for
# variable_other and then variable
#
# To see a list of available scopes in the debug buffer, run lsp-semantic-available-scopes
entity_name_function = "function"
entity_name_function_method = "function"
entity_name_namespace = "module"
entity_name_type_class = "type"
entity_name_type_enum = "type"
entity_name_type_template = "type"
entity_name_type = "type"
variable_other = "variable"
variable_other_enummember = "variable"
variable_other_field = "variable"
variable = "variable"

[semantic_tokens]
type = "type"
variable = "variable"
namespace = "module"
function = "function"
string = "string"
keyword = "keyword"
operator = "operator"
comment = "comment"

[semantic_modifiers]
documentation = "documentation"
readonly = "default+d"

[language.c_cpp]
filetypes = ["c", "cpp"]
roots = ["compile_commands.json", ".ccls", ".git"]
command = "clangd"
formatTool = "clang-format"

[language.python]
filetypes = ["python"]
roots = ["requirements.txt", "setup.py", ".git", ".hg"]
command = "@kak_config@/lsp/pyls/pyls"

[language.javascript]
filetypes = ["javascript"]
roots = ["package.json"]
command = "@kak_config@/lsp/flow/node_modules/.bin/flow"
args = ["lsp"]

# kakoune doesn't differentiate between typescript and tsx files
# but the language server does. Since tsx is a superset of ts
# we just set this to be tsx but it might be better to fix this
[language.typescriptreact]
filetypes = ["typescript"]
roots = ["package.json"]
command = "@kak_config@/lsp/tsls/node_modules/.bin/typescript-language-server"
args = ["--stdio"]

[language.go]
filetypes = ["go"]
roots = ["Gopkg.toml", "go.mod", ".git", ".hg"]
command = "bingo"
offset_encoding = "utf-8"

[language.rust]
filetypes = ["rust"]
roots = ["Cargo.toml"]
command = "rls"
